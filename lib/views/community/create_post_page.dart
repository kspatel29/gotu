import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:gotuappv1/model/post.dart';

class CreatePostPage extends StatefulWidget {
  final String communityId;
  final String cityName; // Add city name as a parameter

  CreatePostPage({Key? key, required this.communityId, required this.cityName}) : super(key: key); // Include cityName in constructor

  @override
  _CreatePostPageState createState() => _CreatePostPageState();
}

class _CreatePostPageState extends State<CreatePostPage> {
  final _formKey = GlobalKey<FormState>();
  final _titleController = TextEditingController();
  final _descriptionController = TextEditingController();

  void _submitPost() async {
  if (_formKey.currentState!.validate()) {
    Post newPost = Post(
      id: '', // ID will be generated by Firestore
      title: _titleController.text,
      description: _descriptionController.text,
      authorId: FirebaseAuth.instance.currentUser!.uid,
      upvotes: 0,
      downvotes: 0,
      mediaUrl: [], // Adjust as necessary for media handling
      commentCount: 0,
      timestamp: Timestamp.now(),
    );

    await FirebaseFirestore.instance.collection('cities')
      .doc(widget.cityName) // Ensure you're passing cityName
      .collection('communities')
      .doc(widget.communityId)
      .collection('posts')
      .add(newPost.toMap());

    // Clear fields and show success message
    _titleController.clear();
    _descriptionController.clear();
    Navigator.pop(context);
  }
}


  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Create New Post in ${widget.cityName}'), // Display the city name in the title
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            children: <Widget>[
              TextFormField(
                controller: _titleController,
                decoration: InputDecoration(labelText: 'Title'),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter a title';
                  }
                  return null;
                },
              ),
              TextFormField(
                controller: _descriptionController,
                decoration: const InputDecoration(labelText: 'Description'),
                keyboardType: TextInputType.multiline,
                maxLines: null,
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter a description';
                  }
                  return null;
                },
              ),
              const SizedBox(height: 20),
              ElevatedButton(
                onPressed: _submitPost,
                child: const Text('Submit Post'),
              ),
            ],
          ),
        ),
      ),
    );
  }

  @override
  void dispose() {
    _titleController.dispose();
    _descriptionController.dispose();
    super.dispose();
  }
}
